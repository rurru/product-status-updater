<?php

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function product_status_update_help($path, $arg) {
  switch ($path) {
    case "admin/help#product_status_update":
      return t("Check Status of Products on Vendor Site and Update Accordingly"); 
      break; 
  }
}

/**
* Implements hook_menu().
*/

function product_status_update_menu() {
	
	$items = array();
	
	$items['admin/config/content/product_status_update'] = array(
		'title' => 'Product Status Update',
		'description' => 'Configuration and Administration for Product Status Update Module',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('product_status_update_form'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM,
	);
	
	$items['admin/config/content/product_status_update/main'] = array(
		'title' => t('Settings'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 10,
	);
	
	$items['admin/config/content/product_status_update/discontinued'] = array(
		'title' => t('Discontinued'),
		'description' => t('View/Delete Discontinued Items'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('product_status_update_discontinued'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 20,
	);
	
	$items['admin/config/content/product_status_update/outofstock'] = array(
		'title' => t('Out of Stock'),
		'description' => t('View/Disable Out-of-Stock Items'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('product_status_update_outofstock'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 30,
	);
	
	$items['admin/config/content/product_status_update/restocked'] = array(
		'title' => t('Restocked'),
		'description' => t('View/Enable Items that are Back in Stock'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('product_status_update_restocked'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 40,
	);
	
	$items['admin/config/content/product_status_update/errorlog'] = array(
		'title' => t('Error Log'),
		'description' => t('Items that could not be processed'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('product_status_update_error_log'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 50,
	);
	
	return $items;
}


/**
* Page callback: Product Status Update settings
*
* @see product_status_update_menu()
*/

function product_status_update_form($form, &$form_state) {
	
	$form['batch_size'] = array(
		'#type' => 'textfield',
		'#title' => t('Batch Size'),
		'#default_value' => variable_get('psu_batch_size', 100),
		'#size' => 3,
		'#maxlength' => 3,
		'#description' => t('Number of products to search per batch'),
		'#required' => TRUE,
	);
	
	$form['number_of_batches'] = array(
		'#type' => 'textfield',
		'#title' => t('Batches to Run per cron'),
		'#default_value' => variable_get('psu_batches_per_run', 5),
		'#size' => 2,
		'#maxlength' => 2,
		'#description' => t('Number of batches to process per cron run'),
		'#required' => TRUE,
	);
	
	$form['run_now'] = array(
		'#type' => 'checkbox',
		'#title' => t('Run Test Batch'),
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Save Configuration',
  );
		
	return $form;
}

/**
* Page callback: Product Status Update settings
*
* @see product_status_update_menu()
*/

function product_status_update_discontinued($form, &$form_state) {
	
	$product_list = '';
	
	$discontinued_products = db_select('product_status_update', 'psu')
		->fields('psu', array('product_id', 'sku'))
		->condition('discontinued', 1)
		->execute()->fetchAllAssoc('product_id', PDO::FETCH_ASSOC);
		
	foreach($discontinued_products as $product) {		
		$title = db_select('commerce_product', 'cp')
			->fields('cp', array('title'))
			->condition('product_id', $product['product_id'])
			->execute()->fetchField();
		
		$product_list .= $product['sku'].' '.$title.'<br />';
	}
	
	$product_list .= '<br />';
	
	$form['report'] = array(
		'#type' => 'item',
		'#title' => 'List of Discontinued Items',
		'#suffix' => $product_list,
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Delete All',
	);
	
	return $form;
}

function product_status_update_outofstock($form, &$form_state) {
	
	$product_list = '';
	
	$outofstock_products = db_query('SELECT * FROM {product_status_update} JOIN {commerce_product} ON product_status_update.product_id = commerce_product.product_id WHERE out_of_stock = 1 AND status = 1')->fetchAllAssoc('product_id', PDO::FETCH_ASSOC);
		
	foreach($outofstock_products as $product) {		
		$title = db_select('commerce_product', 'cp')
			->fields('cp', array('title'))
			->condition('product_id', $product['product_id'])
			->execute()->fetchField();	
			
		$product_list .= $product['sku'].' '.$title.'<br />';
		
	}
	
	$product_list .= '<br />';
	
	$form['report'] = array(
		'#type' => 'item',
		'#title' => 'List of Out-Of-Stock Items',
		'#suffix' => $product_list,
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Disable All',
	);
	
	return $form;
}

function product_status_update_restocked($form, &$form_state) {
	
	$product_list = '';
	
	$restocked_products = db_query('SELECT * FROM {product_status_update} JOIN {commerce_product} ON product_status_update.product_id = commerce_product.product_id WHERE out_of_stock = 0 AND status = 0 AND processed = 1')->fetchAllAssoc('product_id', PDO::FETCH_ASSOC);
		
	foreach($restocked_products as $product) {		
		$title = db_select('commerce_product', 'cp')
			->fields('cp', array('title'))
			->condition('product_id', $product['product_id'])
			->execute()->fetchField();	
			
		$product_list .= $product['sku'].' '.$title.'<br />';
		
	}
	
	$product_list .= '<br />';
	
	$form['report'] = array(
		'#type' => 'item',
		'#title' => 'List of Items that are Back in Stock',
		'#suffix' => $product_list,
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Enable All',
	);
	
	return $form;
}

/**
* Validate Settings form data--make sure the user has entered a positive number
*/

function product_status_update_form_validate($form, &$form_state) {
	$size = $form_state['values']['batch_size'];
	$batches = $form_state['values']['number_of_batches'];
	
	if (!is_numeric($size) || $size <= 0) {
		form_set_error('batch_size', t('Please enter a positive number for batch size'));
	}
	if (!is_numeric($batches) || $batches <= 0) {
		form_set_error('number_of_batches', t('Please enter a positive number for batches per run'));
	}
}


/**
* Add a submit handler/function to the config form that will run
* a test batch if specified
*/

function product_status_update_form_submit($form, &$form_state) {
	
	$size = $form_state['values']['batch_size'];
	$batches = $form_state['values']['number_of_batches'];

	variable_set('psu_batch_size', $size);
	variable_set('psu_batches_per_run', $batches);
	
	if ($form_state['values']['run_now']) {
		process_product_batch(1);
	}
	
	drupal_set_message(t('Settings have been updated'));
}

/**
* Add a submit handler/function to the Discontinued tab
* Deletes products marked as discontinued
*/

function product_status_update_discontinued_submit($form, &$form_state) {
	
	$number_deleted = 0;
	
	$discontinued_products = db_select('product_status_update', 'psu')
		->fields('psu', array('product_id', 'sku'))
		->condition('discontinued', 1)
		->execute()->fetchAllAssoc('product_id', PDO::FETCH_ASSOC);
		
	foreach ($discontinued_products as $product) {
		commerce_product_delete($product['product_id']);
		db_delete('product_status_update')
				->condition('product_id', $product['product_id'])
				->execute();
		$number_deleted++;
	}
	
	drupal_set_message(t($number_deleted.' items deleted.'));
}

/**
* Add a submit handler/function to the Out of Stock tab
* Disables products marked as out of stock
*/

function product_status_update_outofstock_submit($form, &$form_state) {
	
	$number_disabled = 0;
	
	$outofstock_products = db_query('SELECT * FROM {product_status_update} JOIN {commerce_product} ON product_status_update.product_id = commerce_product.product_id WHERE out_of_stock = 1 AND status = 1')->fetchAllAssoc('product_id', PDO::FETCH_ASSOC);
		
	foreach ($outofstock_products as $product) {
		db_update('commerce_product')
			->fields(array(
					'status' => 0,
					)
			)
			->condition('product_id', $product['product_id'])
			->execute();
			
			db_update('commerce_product_revision')
			->fields(array(
					'status' => 0,
					)
			)
			->condition('product_id', $product['product_id'])
			->execute();
	
		$number_disabled++;
	}
	
	drupal_set_message(t($number_disabled.' items disabled.'));
}

/**
* Add a submit handler/function to the Restocked tab
* Re-enables products that are back in stock
*/

function product_status_update_restocked_submit($form, &$form_state) {
	
	$number_enabled = 0;
	
	$restocked_products = db_query('SELECT * FROM {product_status_update} JOIN {commerce_product} ON product_status_update.product_id = commerce_product.product_id WHERE out_of_stock = 0 AND status = 0 AND processed = 1')->fetchAllAssoc('product_id', PDO::FETCH_ASSOC);
		
	foreach ($restocked_products as $product) {
		db_update('commerce_product')
			->fields(array(
					'status' => 1,
					)
			)
			->condition('product_id', $product['product_id'])
			->execute();
	
		$number_enabled++;
	}
	
	drupal_set_message(t($number_enabled.' items re-activated.'));
}

/**
* Implements hook_cron_queue_info().
*/

function product_status_update_cron_queue_info() {
	$queues['product_status_update'] = array(
		'worker callback' => 'process_product_batch',
		'time' => 300,
		);
	
	return $queues;
}

/**
* Implements hook_cron().
*/

function product_status_update_cron() {
	$queue = DrupalQueue::get('product_status_update');
	
	$unprocessed_count = db_query('SELECT COUNT(product_id) FROM {product_status_update} WHERE processed = 0')->fetchField();
	if ($unprocessed_count > 0) {
		for ($i = 0; $i < variable_get('psu_batches_per_run', 5); $i++) {
			$queue->createItem($i);
		}
	}
	else if (date('G')==0 && date('i')==00 && date('l')=="Monday") {
		db_update('product_status_update')
				->fields(array(
					'processed' => 0,
					)
				)
				->execute();
	}
}


/**
* Custom content function.
*
* Process one batch of products--look up SKU numbers on vendor site
* and set database flags accordingly
*   
*/
function process_product_batch($queue_item) {
	
	$url = "https://qgold.com//ProductListings/SearchProducts";
	$user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36";
	
	$limit = variable_get('psu_batch_size', 20);
	$result = db_query_range("SELECT sku FROM {product_status_update} WHERE processed = 0", 0, $limit);
	
	foreach ($result as $product) {
		$post_string = 'searchTerms='.$product->sku;
		
		$connection = curl_init($url);
		curl_setopt($connection, CURLOPT_CONNECTTIMEOUT, 30);
		curl_setopt($connection, CURLOPT_USERAGENT, $user_agent);
		curl_setopt($connection, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($connection, CURLOPT_SSL_VERIFYPEER, false);
		curl_setopt($connection, CURLOPT_FOLLOWLOCATION, 1);
		curl_setopt($connection, CURLOPT_POSTFIELDS, $post_string);
		
		$result = curl_exec($connection);
		curl_close($connection);
		
		if (strpos ($result, '"IsDiscontinued":true') !== false) {
			$updated = db_update('product_status_update')
				->fields(array(
					'discontinued' => 1,
					'processed' => 1,
					)
				)
				->condition('sku', $product->sku)
				->execute();
		}
		else if (strpos ($result, '"InStock":0') !== false && strpos ($result, '"IsBuildable":true') === false) {
			$updated = db_update('product_status_update')
				->fields(array(
					'out_of_stock' => 1,
					'processed' => 1,
					)
				)
				->condition('sku', $product->sku)
				->execute();
		}
		else if (strpos ($result, 'no_products') !== false) {
			$updated = db_delete('product_status_update')
				->condition('sku', $product->sku)
				->execute();
		}
		else if (strpos($result, 'product_detail') !== false) {
			$updated = db_update('product_status_update')
				->fields(array(
					'out_of_stock' => 0,
					'processed' => 1,
					)
				)
				->condition('sku', $product->sku)
				->execute();
		}
		else {
			$updated = db_update('product_status_update')
				->fields(array(
					'processed' => 2,
					)
				)
				->condition('sku', $product->sku)
				->execute();
		}
	}
	
	drupal_set_message(t('Test batch run successfully'));
}






